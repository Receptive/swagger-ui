{
    "swagger": "2.0",
    "info": {
        "version": "1.0.0",
        "title": "Receptive API",
        "description": "## Who is this for?\n\nThis documentation is for developers creating their own integration with [Receptive's](https://www.receptive.io) API. If you are doing a standard integration, there's a really easy [Javascript integration](https://help.receptive.io/hc/en-us/articles/209221969-How-to-integrate-Receptive-with-your-app) that you should know about before you go to the effort of building your own integration.\n\n## Authentication\n\nAPI calls generally need to be authenticated. Generate an API Key at https://receptive.io/app/#/integrate. This key should then be added to every request URL as a query parameter named 'auth-token'\n\n## Endpoint\n\nAPI endpoint is https://api.eu-west-1.receptive.io.\n## Notes\n\nAPI endpoints are being added to this documentation as needed by customers. If you don't see an endpoint you need please contact support and if it exists we'll publish the docs here. The 'try it out' feature on this documentation page will probably be blocked by your browser because the Access-Control-Allow-Origin header has its value set by the Receptive server depending on your hostname.\n\n## Generating client code\n\nThis documentation is automatically generated from an OpenAPI spec available [here](http://apidoc.receptive.io/receptive.swagger.json). You can use Swagger to auto-generate API client code in many languages using the [Swagger Editor](http://editor.swagger.io/#/)",
        "contact": {
            "name": "Receptive Support",
            "email": "support@receptive.io"
        }
    },
    "host": "api.eu-west-1.receptive.io",
    "schemes": [
        "https"
    ],
    "produces": [
        "application/json"
    ],
    "securityDefinitions": {
        "userApiKey": {
            "description": "Generate an API Key at https://receptive.io/app/#/integrate. This key should then be added to every request URL as a query parameter.",
            "type": "apiKey",
            "name": "auth-token",
            "in": "query"
        }
    },
    "security": [
        {
            "userApiKey": []
        }
    ],
    "paths": {
        "/health-check/ping": {
            "get": {
                "security": [],
                "tags": [
                    "system"
                ],
                "summary": "Health check for API",
                "description": "Provides a response for automatic checks that the API and load balancers are healthy",
                "responses": {
                    "200": {
                        "description": "API is healthy"
                    },
                    "503": {
                        "description": "Load balancers cannot route a request to a healthy API server"
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Get a User record",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "number"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "the User record",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "410": {
                        "description": "User has been deleted"
                    }
                }
            },
            "delete": {
                "tags": [
                    "user"
                ],
                "summary": "Delete a User record",
								"description": "This removes most traces of a User's existence from the system. For an EndUser you might want to consider just letting them churn after a period of inactivity.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "number"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "the deleted User",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Create or update an EndUser",
                "description": "Replicates much of the functionality of the widget ping, allowing callers to create or update User records for End Users. This endpoint is used by our Zapier integration. The only value allowed in user.roles is 'endUser'",
                "parameters": [
                    {
                        "name": "data",
                        "description": "the account and user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EndUserPing"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        }
    },
    "definitions": {
        "Account": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "is_paying": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string",
                    "format": "dateTime"
                },
                "monthly_value": {
                    "type": "number",
                    "format": "float"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "User": {
            "type": "object",
            "properties": {
                "roles": {
                    "type": "string",
                    "enum": [
                        "endUser"
                    ]
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string",
                    "format": "dateTime"
                },
                "full_name": {
                    "type": "string"
                }
            }
        },
        "EndUserPing": {
            "type": "object",
            "properties": {
                "return_url": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/User"
                },
                "account": {
                    "$ref": "#/definitions/Account"
                }
            }
        }
    }
}
